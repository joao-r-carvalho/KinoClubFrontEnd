{"version":3,"sources":["Resources/Spoilers.jpg","Components/Movies/MoviePresentation.js","Components/Common/Clock.js","Components/Common/LoginWidget.js","Components/Common/TopBanner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MoviePresentation","props","state","isImageHidden","error","isLoaded","MovieDescription","MovieTitle","MovieImageURL","ToggleImage","bind","axios","get","then","res","setState","data","Description","Title","Image","this","message","src","Spoilers","onClick","rowSpan","React","Component","Clock","date","Date","timerID","setInterval","tick","clearInterval","toLocaleTimeString","LoginWidget","handleLoginClick","handleLogoutClick","isLoggedIn","username","body","className","TopBanner","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,sC,4OC0E5BC,E,kDArEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,eAAe,EACfC,MAAO,KACPC,UAAU,EACVC,iBAAkB,KAClBC,WAAY,KACZC,cAAe,MAEnB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAVJ,E,gEAaE,IAAD,OAChBC,IAAMC,IAAI,kEACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVV,UAAU,EACVC,iBAAkBQ,EAAIE,KAAKC,YAC3BV,WAAYO,EAAIE,KAAKE,MACrBV,cAAeM,EAAIE,KAAKG,WAE7B,SAACf,GACA,EAAKW,SAAS,CACVV,UAAU,EACVD,e,oCAMD,IAAD,OACVgB,KAAKL,UAAS,SAAAb,GAAK,MAAK,CACpBC,eAAgB,EAAKD,MAAMC,oB,+BAK/B,OAAIiB,KAAKlB,MAAME,MACJ,uCAAagB,KAAKlB,MAAME,MAAMiB,SAC7BD,KAAKlB,MAAMG,SAIf,6BAEI,+BACI,+BACI,4BACI,4BACI,yBAAKiB,IAAKF,KAAKlB,MAAMC,cAAgBoB,IAAWH,KAAKlB,MAAMM,cACvDgB,QAASJ,KAAKX,eAItB,wBAAIgB,QAAQ,KACR,gCAAML,KAAKlB,MAAMK,WAAjB,KACA,2BAAIa,KAAKlB,MAAMI,uBAhBhC,gD,GA1CaoB,IAAMC,WC8BvBC,G,wDA/BX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT2B,KAAM,IAAIC,MAHC,E,gEAOE,IAAD,OAChBV,KAAKW,QAAUC,aACX,kBAAM,EAAKC,SACX,O,6CAKJC,cAAcd,KAAKW,W,6BAKnBX,KAAKL,SAAS,CACVc,KAAM,IAAIC,S,+BAKd,OACI,qCAAYV,KAAKlB,MAAM2B,KAAKM,qBAA5B,S,GA5BQT,IAAMC,YC4CXS,E,kDA1CX,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IAEDoC,iBAAmB,EAAKA,iBAAiB3B,KAAtB,gBACxB,EAAK4B,kBAAoB,EAAKA,kBAAkB5B,KAAvB,gBACzB,EAAKR,MAAQ,CACTqC,YAAY,EACZC,SAAU,oBAPC,E,+DAYfpB,KAAKL,SAAS,CAAEwB,YAAY,M,0CAG5BnB,KAAKL,SAAU,CACXwB,YAAY,M,+BAIhB,IAAIE,EAYJ,OATIA,EADArB,KAAKlB,MAAMqC,WACJ,6BAAK,uCAAanB,KAAKlB,MAAMsC,UAChC,4BAAQhB,QAASJ,KAAKkB,kBAAmBI,UAAU,mCAAnD,WAGG,6BAAK,4BAAQlB,QAASJ,KAAKiB,iBAAkBK,UAAU,8BAAlD,SACR,4BAAQA,UAAU,mCAAlB,WAKJ,6BACKD,O,GAnCSf,IAAMC,WCwBjBgB,E,kDAtBX,WAAY1C,GAAQ,uCACVA,G,qDAGN,OACI,yBAAKyC,UAAU,aACX,kBAAC,EAAD,MAEA,oDAGA,kBAAC,EAAD,W,GAZQhB,IAAMC,WCYfiB,MAXf,WACE,OACE,yBAAKF,UAAW,cACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLyD,QAAQzD,MAAMA,EAAMiB,a","file":"static/js/main.254cad95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spoilers.0b7f3581.jpg\";","import React from 'react';\r\nimport Spoilers from '../../Resources/Spoilers.jpg'\r\nimport axios from 'axios';\r\n\r\nclass MoviePresentation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isImageHidden: true,\r\n            error: null,\r\n            isLoaded: false,\r\n            MovieDescription: null,\r\n            MovieTitle: null,\r\n            MovieImageURL: null\r\n        }\r\n        this.ToggleImage = this.ToggleImage.bind(this);\r\n\r\n    }\r\n    componentDidMount() {\r\n        axios.get(\"https://kinoclub-1595860726231.azurewebsites.net/Movies/Random\")\r\n            .then(res => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    MovieDescription: res.data.Description,\r\n                    MovieTitle: res.data.Title,\r\n                    MovieImageURL: res.data.Image,\r\n                })\r\n            }, (error) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                })\r\n            }\r\n            )\r\n\r\n    }\r\n    ToggleImage() {\r\n        this.setState(state => ({\r\n            isImageHidden: !this.state.isImageHidden\r\n        }));\r\n\r\n    }\r\n    render() {\r\n        if (this.state.error) {\r\n            return <div>Error: {this.state.error.message}</div>;\r\n        } else if (!this.state.isLoaded) {\r\n            return <div>Loading... </div>;\r\n        } else {\r\n            return (\r\n                <div>\r\n\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <img src={this.state.isImageHidden ? Spoilers : this.state.MovieImageURL}\r\n                                        onClick={this.ToggleImage} >\r\n\r\n                                    </img>\r\n                                </td>\r\n                                <td rowSpan='3'>\r\n                                    <h1> {this.state.MovieTitle} </h1>\r\n                                    <p>{this.state.MovieDescription}</p>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default MoviePresentation;\r\n","import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h2 >It is {this.state.date.toLocaleTimeString()} </h2>\r\n        )\r\n    }\r\n}\r\nexport default Clock;\r\n","import React from 'react';\r\nimport '../../Style/Common.css';\r\n\r\nclass LoginWidget extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleLoginClick = this.handleLoginClick.bind(this);\r\n        this.handleLogoutClick = this.handleLogoutClick.bind(this);\r\n        this.state = {\r\n            isLoggedIn: false,\r\n            username: \"Jo√£o Carvalho\"\r\n        }\r\n    }\r\n    handleLoginClick() {\r\n\r\n        this.setState({ isLoggedIn: true });\r\n    }\r\n    handleLogoutClick() {\r\n        this.setState ({\r\n            isLoggedIn: false\r\n        })\r\n    }\r\n    render() {\r\n        let body;\r\n\r\n        if (this.state.isLoggedIn) {\r\n            body = <div><h2>Welcome {this.state.username}</h2>\r\n                <button onClick={this.handleLogoutClick} className=\"KinoButton KinoButton-Secondary\">Logout</button></div>;\r\n\r\n        } else {\r\n            body = <div><button onClick={this.handleLoginClick} className=\"KinoButton KinoButton-Main\">Login</button>\r\n                <button className=\"KinoButton KinoButton-Secondary\">Signup</button></div>;\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {body}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LoginWidget; ","import React from 'react';\r\nimport  '../../Style/Common.css';\r\nimport Clock from '../Common/Clock.js';\r\nimport LoginWidget from './LoginWidget.js';\r\nclass TopBanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"TopBanner\">\r\n                <Clock />\r\n\r\n                <h2 >Movie Presentation! </h2>\r\n\r\n\r\n                <LoginWidget />\r\n\r\n\r\n            </div>)\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default TopBanner;","import React from 'react';\r\nimport './Style/Common.css'\r\nimport MoviePresentation from './Components/Movies/MoviePresentation.js';\r\nimport './App.css';\r\nimport TopBanner from './Components/Common/TopBanner'\r\nfunction App() {\r\n  return (\r\n    <div className= \"MainLayout\">\r\n      <TopBanner/>\r\n      <MoviePresentation />\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />  \r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}